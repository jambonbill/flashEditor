package com.playpower.views{	import flash.display.Sprite;	import flash.events.Event;	import com.carlcalderon.arthropod.Debug;	import com.playpower.core.Constants;	import com.playpower.events.CustomEvent;	import com.playpower.ui.*;	public class Controls extends Sprite	{		private var _alphaSlider:PP_Slider;		private var _tileTog:PP_Toggle;		private var _palTog:PP_Toggle;		private var _hexDispTog:PP_Toggle;		/*private var _leftBtn:PP_Button;		private var _rightBtn:PP_Button;		private var _upBtn:PP_Button;		private var _dnBtn:PP_Button;*/		private var _chrSlider:PP_Slider;		private var _openRAM:PP_IOButton;		private var _downloadRAM:PP_IOButton;		private var _openNAM:PP_IOButton;		private var _downloadNAM:PP_IOButton;		private var _saveNAM:PP_IOButton;		private var _uploadNAM:PP_IOButton;		private var _openCHR:PP_IOButton;		private var _downloadCHR:PP_IOButton;		private var _saveCHR:PP_IOButton;		private var _openPAL:PP_IOButton;		private var _downloadPAL:PP_IOButton;		private var _savePAL:PP_IOButton;		private var _uploadPAL:PP_IOButton;		private var _submit:PP_IOButton;		//private var _txtArea:PP_TextArea;		public function Controls()		{			this.addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage, false, 0, true);		}		public function _onAddedToStage($e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);						// create grid alpha slider			_alphaSlider = new PP_Slider("grid-alpha", new color_slider(), new color_slider_label(), Constants.ALPHA_SLIDER_DEFAULT, Constants.ALPHA_SLIDER_MAX_VAL);			_alphaSlider.addEventListener(CustomEvent.SLIDER_PROGRESS, _onSliderProgress, false, 0, true);			this.addChild(_alphaSlider);						// create tile toggle			_tileTog = new PP_Toggle("TILE", new tile_label(), new checkbox_button());			_tileTog.x = Math.round(_alphaSlider.x + _alphaSlider.width + Constants.GUTTER_WIDTH);			_tileTog.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_tileTog);						// create palette toggle			_palTog = new PP_Toggle("PALETTE", new palette_label(), new checkbox_button());			_palTog.x = Math.round(_tileTog.x + _tileTog.width + (Constants.GUTTER_WIDTH*2));			_palTog.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_palTog);						// create hex display toggle			_hexDispTog = new PP_Toggle("HEX DISPLAY", new hex_label(), new checkbox_button());			_hexDispTog.x = Math.round(_palTog.x + _palTog.width + Constants.GUTTER_WIDTH);			_hexDispTog.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_hexDispTog);						/*// create directional buttons			_leftBtn = new PP_Button("L");			_leftBtn.y = _alphaSlider.y + _alphaSlider.height + (Constants.GUTTER_WIDTH*2);			_leftBtn.addEventListener(CustomEvent.BUTTON_CLICK, _onButtonUp, false, 0, true);			this.addChild(_leftBtn);						_rightBtn = new PP_Button("R");			_rightBtn.x = Constants.GUTTER_WIDTH*2;			_rightBtn.y = _alphaSlider.y + _alphaSlider.height + (Constants.GUTTER_WIDTH*2);			_rightBtn.addEventListener(CustomEvent.BUTTON_CLICK, _onButtonUp, false, 0, true);			this.addChild(_rightBtn);						_upBtn = new PP_Button("U");			_upBtn.x = Constants.GUTTER_WIDTH;			_upBtn.y = _alphaSlider.y + _alphaSlider.height + Constants.GUTTER_WIDTH;			_upBtn.addEventListener(CustomEvent.BUTTON_CLICK, _onButtonUp, false, 0, true);			this.addChild(_upBtn);						_dnBtn = new PP_Button("D");			_dnBtn.x = Constants.GUTTER_WIDTH;			_dnBtn.y = _alphaSlider.y + _alphaSlider.height + (Constants.GUTTER_WIDTH*3);			_dnBtn.addEventListener(CustomEvent.BUTTON_CLICK, _onButtonUp, false, 0, true);			this.addChild(_dnBtn);*/						// create chr slider			_chrSlider = new PP_Slider("chr-page", new chr_slider(), new chr_slider_label(), Constants.CHR_SLIDER_DEFAULT, Constants.CHR_SLIDER_MAX_VAL);			_chrSlider.addEventListener(CustomEvent.SLIDER_PROGRESS, _onSliderProgress, false, 0, true);			_chrSlider.addEventListener(CustomEvent.SLIDER_UP, _onSliderUp, false, 0, true);			_chrSlider.y = _alphaSlider.y + _alphaSlider.height + (Constants.GUTTER_WIDTH*2);			this.addChild(_chrSlider);						// create open RAM button			_openRAM = new PP_IOButton("OPEN RAM", new open_ram_button());			_openRAM.y = Constants.GUTTER_WIDTH*5;			_openRAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_openRAM);			_openRAM.enable();						// create dl RAM button			/*_downloadRAM = new PP_IOButton("DL RAM");			_downloadRAM.x = Constants.GUTTER_WIDTH*4;			_downloadRAM.y = Constants.GUTTER_WIDTH*6;			_downloadRAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_downloadRAM);			_downloadRAM.enable();*/						// create open PAL button			_openPAL = new PP_IOButton("OPEN PAL", new open_pal_button());			_openPAL.y = Constants.GUTTER_WIDTH*7;			_openPAL.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_openPAL);			_openPAL.enable();						// create dl PAL button			/*_downloadPAL = new PP_IOButton("DL PAL");			_downloadPAL.x = Constants.GUTTER_WIDTH*4;			_downloadPAL.y = Constants.GUTTER_WIDTH*8;			_downloadPAL.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_downloadPAL);			_downloadPAL.enable();*/						// create open CHR button			_openCHR = new PP_IOButton("OPEN CHR", new open_chr_button());			_openCHR.y = Constants.GUTTER_WIDTH*9;			_openCHR.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_openCHR);			_openCHR.disable();						// create dl CHR button			/*_downloadCHR = new PP_IOButton("DL CHR");			_downloadCHR.x = Constants.GUTTER_WIDTH*4;			_downloadCHR.y = Constants.GUTTER_WIDTH*10;			_downloadCHR.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_downloadCHR);			_downloadCHR.disable();*/						// create open NAM button			_openNAM = new PP_IOButton("OPEN NAM", new open_nam_button());			_openNAM.y = Constants.GUTTER_WIDTH*11;			_openNAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_openNAM);			_openNAM.disable();						// create dl NAM button			/*_downloadNAM = new PP_IOButton("DL NAM");			_downloadNAM.x = Constants.GUTTER_WIDTH*4;			_downloadNAM.y = Constants.GUTTER_WIDTH*12;			_downloadNAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_downloadNAM);			_downloadNAM.disable();*/						// create save PAL button			_savePAL = new PP_IOButton("SAVE PAL", new save_pal_button());			_savePAL.x = Constants.GUTTER_WIDTH*5;			_savePAL.y = Constants.GUTTER_WIDTH*7;			_savePAL.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_savePAL);			_savePAL.enable();						// create save PAL button			/*_uploadPAL = new PP_IOButton("UPLOAD PAL");			_uploadPAL.x = Constants.GUTTER_WIDTH*12;			_uploadPAL.y = Constants.GUTTER_WIDTH*8;			_uploadPAL.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_uploadPAL);			_uploadPAL.enable();*/						// create save CHR button			_saveCHR = new PP_IOButton("SAVE CHR", new save_chr_button());			_saveCHR.x = Constants.GUTTER_WIDTH*5;			_saveCHR.y = Constants.GUTTER_WIDTH*9;			_saveCHR.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_saveCHR);			_saveCHR.disable();						// create save NAM button			_saveNAM = new PP_IOButton("SAVE NAM", new save_nam_button());			_saveNAM.x = Constants.GUTTER_WIDTH*5;			_saveNAM.y = Constants.GUTTER_WIDTH*11;			_saveNAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_saveNAM);			_saveNAM.disable();						// create upload NAM button			/*_uploadNAM = new PP_IOButton("UPLOAD NAM");			_uploadNAM.x = Constants.GUTTER_WIDTH*12;			_uploadNAM.y = Constants.GUTTER_WIDTH*12;			_uploadNAM.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_uploadNAM);			_uploadNAM.disable();*/						// create submit			_submit = new PP_IOButton("SUBMIT", new submit_button());			_submit.x = -2;			_submit.y = Constants.GUTTER_WIDTH*13;			_submit.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			this.addChild(_submit);			_submit.disable();		}				public function switchChrPage(val:String):void		{			_chrSlider.val = val;		}				public function disableControl(str:String):void		{			switch(str)			{				case "chr": 					_openCHR.disable(); 					//_downloadCHR.disable();					break;				case "nam": 					_openNAM.disable(); 					//_downloadNAM.disable(); 					_saveNAM.disable(); 					//_uploadNAM.disable(); 					break;				case "submit":					_submit.disable();					break;			}					}				public function enableControl(str:String):void		{			switch(str)			{				case "chr": 					_openCHR.enable(); 					_saveCHR.enable(); 					//_downloadCHR.enable();					break;				case "nam": 					_openNAM.enable(); 					//_downloadNAM.enable(); 					_saveNAM.enable(); 					//_uploadNAM.enable(); 					break;				case "submit":					_submit.enable();					break;			}					}				private function _onSliderUp($e:CustomEvent):void		{			dispatchEvent( $e );		}				private function _onSliderProgress($e:CustomEvent):void		{			dispatchEvent( $e );		}				private function _onButtonUp($e:CustomEvent):void		{			dispatchEvent( $e );		}	}}