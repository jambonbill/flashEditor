package com.playpower.ui{	import flash.display.Sprite;	import flash.display.Graphics;	import flash.events.Event;	import flash.events.MouseEvent;	import com.carlcalderon.arthropod.Debug;	import com.playpower.core.Constants;	import com.playpower.events.CustomEvent;	public class PP_Toggle extends Sprite	{		private var _id:String;		private var _asset:checkbox_button;		//private var _btn:Sprite;		private var _label:*;//PP_Label;		private var _curVal:Boolean = true;		public function PP_Toggle(id:String, label:*, asset:checkbox_button)		{			_id = id;			_label = label;			_asset = asset;						this.addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage, false, 0, true);		}		public function _onAddedToStage($e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);						//_btn = new Sprite();			this.addChild(_asset);			_asset.buttonMode = true;			_asset.addEventListener(MouseEvent.MOUSE_DOWN, _onBtnDown, false, 0, true);			_asset.addEventListener(MouseEvent.MOUSE_UP, _onBtnUp, false, 0, true);			_asset.addEventListener(MouseEvent.MOUSE_OVER, _onBtnOver, false, 0, true);			_asset.addEventListener(MouseEvent.MOUSE_OUT, _onBtnOff, false, 0, true);			_asset.btn_on.alpha = 1;						this.addChild(_label);			_label.x = -Math.round((_label.width - _asset.width) / 2);			_label.y = _asset.y + _asset.height + 3;			/*var g:Graphics = _btn.graphics;			g.beginFill(Constants.UI_HILIGHT);			g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);			g.endFill();						_label = new PP_Label(_str);			_label.x = -2;			_label.y = _btn.height;			this.addChild(_label);*/		}				private function _onBtnOver($e:MouseEvent):void		{			if(!_curVal)			{				/*var g:Graphics = _btn.graphics;				g.beginFill(Constants.UI_HILIGHT);				g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);				g.endFill();*/				_asset.btn_on.alpha = 1;			}		}				private function _onBtnOff($e:MouseEvent):void		{			if(!_curVal)			{				/*var g:Graphics = _btn.graphics;				g.beginFill(Constants.UI_DK_BLUE);				g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);				g.endFill();*/				_asset.btn_on.alpha = 0;			}		}				private function _onBtnDown($e:MouseEvent):void		{			/*var g:Graphics = _btn.graphics;			g.beginFill(Constants.UI_HILIGHT);			g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);			g.endFill();*/			_asset.btn_on.alpha = 1;		}				private function _onBtnUp($e:MouseEvent):void		{			_curVal = !_curVal;						//var g:Graphics = _btn.graphics;			if(!_curVal)			{				/*g.beginFill(Constants.UI_DK_BLUE);				g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);				g.endFill();*/				_asset.btn_on.alpha = 0;			}			else			{				/*g.beginFill(Constants.UI_HILIGHT);				g.drawRect(0,0,Constants.BUTTON_DIMS,Constants.BUTTON_DIMS);				g.endFill();*/				_asset.btn_on.alpha = 1;			}						dispatchEvent( new CustomEvent(CustomEvent.BUTTON_UP, {id:_id}) );		}				public function destroy():void		{					}	}}