package{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.FileFilter;	import flash.net.FileReference;    import flash.utils.ByteArray;	import com.carlcalderon.arthropod.Debug;	import com.playpower.core.*;	import com.playpower.events.CustomEvent;	import com.playpower.model.*;	import com.playpower.views.*;	import flash.events.MouseEvent;	public class NametableToolDoc extends Sprite	{		private var _controller:Controller;		private var _namGrid:Grid;		private var _chrGrid:Grid;		private var _chrEditor:CHREditor;		private var _nesPalette:NESPalette;		private var _curPalette:CurrentPalette;		private var _controls:Controls;		private var _ramBuffer:FileIO;		private var _palBuffer:FileIO;		private var _chrBuffer:FileIO;		private var _namBuffer:FileIO;		private var _mx:Number;		private var _my:Number;				public function NametableToolDoc()		{			_controller = Controller.getInstance();						_ramBuffer = new FileIO("ram");			_ramBuffer.addEventListener(Event.COMPLETE, _onRamBufferLoaded, false, 0, true);			_palBuffer = new FileIO("pal");			_palBuffer.addEventListener(Event.COMPLETE, _onPalBufferLoaded, false, 0, true);			_chrBuffer = new FileIO("chr");			_chrBuffer.addEventListener(Event.COMPLETE, _onChrBufferLoaded, false, 0, true);			_namBuffer = new FileIO("nam");			_namBuffer.addEventListener(Event.COMPLETE, _onNamBufferLoaded, false, 0, true);						this.addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage, false, 0, true);		}		public function _onAddedToStage($e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);						// initialize global vars			_controller.gridAlpha = 1.0;			_controller.gridEnabled = true;			// create nes palette array labels			var nesArr:Array = ["00","01","02","03","04","05","06","07","08","09","0A","0B","0C","0D","0E","0F",								"10","11","12","13","14","15","16","17","18","19","1A","1B","1C","1D","1E","1F",								"20","21","22","23","24","25","26","27","28","29","2A","2B","2C","2D","2E","2F",								"30","31","32","33","34","35","36","37","38","39","3A","3B","3C","3D","3E","3F"];			_controller.nesArr = nesArr;						// create left column : namGrid, nesPalette			_namGrid = new Grid(512,480);			_namGrid.addEventListener(CustomEvent.COLOR_SAMPLE, _onColorSample, false, 0, true);			_namGrid.addEventListener(CustomEvent.UPDATE_BUFFER, _onUpdateBuffer, false, 0, true);			_namGrid.x = _namGrid.y = Constants.GUTTER_WIDTH;			this.addChild(_namGrid);						_nesPalette = new NESPalette();			_nesPalette.addEventListener(CustomEvent.BUTTON_UP, _onNESTileUp, false, 0, true);			_nesPalette.x = Constants.GUTTER_WIDTH;			_nesPalette.y = _namGrid.y + _namGrid.height + Constants.GUTTER_WIDTH;			this.addChild(_nesPalette);						// create mid column : chrGrid, curPalette, chrEditor			_chrGrid = new Grid(256,256);			_chrGrid.addEventListener(CustomEvent.BUTTON_UP, _onChrGridUp, false, 0, true);			_chrGrid.x = _namGrid.x + _namGrid.width + Constants.GUTTER_WIDTH; 			_chrGrid.y = Constants.GUTTER_WIDTH;			this.addChild(_chrGrid);						_curPalette = new CurrentPalette();			_curPalette.addEventListener(CustomEvent.BUTTON_UP, _onCurTileUp, false, 0, true);			_curPalette.x = _chrGrid.x;			_curPalette.y = _chrGrid.y + _chrGrid.height + Constants.GUTTER_WIDTH - 4;			this.addChild(_curPalette);						_chrEditor = new CHREditor(256,256);			_chrEditor.addEventListener(CustomEvent.UPDATE_BUFFER, _onCHREdit, false, 0, true);			_chrEditor.x = _namGrid.x + _namGrid.width + Constants.GUTTER_WIDTH; 			_chrEditor.y = _curPalette.y + _curPalette.height + Constants.GUTTER_WIDTH;			this.addChild(_chrEditor);						// create UI			_controls = new Controls();			_controls.addEventListener(CustomEvent.SLIDER_PROGRESS, _onSliderProgress, false, 0, true);			_controls.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			_controls.x = Math.round(_chrGrid.x + _chrGrid.width + Constants.GUTTER_WIDTH);			_controls.y = Math.round(_chrGrid.y);			this.addChild(_controls);		}				private function _onCHREdit($e:CustomEvent):void		{			_chrBuffer.byteArray = $e.objInfo.val;			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.byteArray, _namBuffer.byteArray, _chrBuffer.byteArray);			_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.byteArray, _chrBuffer.byteArray);		}				private function _onUpdateBuffer($e:CustomEvent):void		{			_namBuffer.byteArray = $e.objInfo.val as ByteArray;		}				private function _onColorSample($e:CustomEvent):void		{			_curPalette.setPalette(_palBuffer.byteArray);			//_chrGrid.setBackgroundWithByte(_palBuffer.byteArray[0]);		}				private function _onButtonUp($e:CustomEvent):void		{			var id:String = $e.objInfo.id;						switch(id)			{				case "OPEN RAM": _ramBuffer.startLoadingFile(); break;				case "DL RAM": _ramBuffer.startLoadingFile(); break;				case "OPEN NAM": _namBuffer.startLoadingFile(); break;				case "DL NAM": _namBuffer.startLoadingFile(); break;				case "OPEN CHR": _chrBuffer.startLoadingFile(); break;				case "DL CHR": _chrBuffer.startLoadingFile(); break;				case "OPEN PAL": _palBuffer.startLoadingFile(); break;				case "DL PAL": _palBuffer.startLoadingFile(); break;				case "SAVE NAM": _namBuffer.save(); break;				case "SAVE PAL": _palBuffer.save(); break;				case "UPLOAD NAM": _namBuffer.startLoadingFile(true); break;				case "UPLOAD PAL": _palBuffer.startLoadingFile(true); break;				/*case "L": _grid.shiftVals("L"); break;				case "R": _grid.shiftVals("R"); break;				case "U": _grid.shiftVals("U"); break;				case "D": _grid.shiftVals("D"); break;*/				case "TILE": _controller.tileDraw = !_controller.tileDraw; break;				case "PALETTE": _controller.palDraw = !_controller.palDraw; break;				case "HEX DISPLAY": 					_nesPalette.toggleHexDisplay(); 					_curPalette.toggleHexDisplay(); 					break;			}		}				private function _onSliderProgress($e:CustomEvent):void		{			var id:String = $e.objInfo.id;			var val:Number = Number($e.objInfo.val);			var pct:Number = Number($e.objInfo.percent);						switch(id)			{				case "grid-alpha": 					_namGrid.setLinesAlpha(pct); 					_chrGrid.setLinesAlpha(pct);					_chrEditor.setLinesAlpha(pct);					break;				case "chr-page": 					_controller.chrPage = val-1;					_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.byteArray, _chrBuffer.byteArray);					break;			}		}				private function _onChrGridUp($e:CustomEvent):void		{			_chrEditor.loadEditor();		}				private function _onCurTileUp($e:CustomEvent):void		{			_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.byteArray, _chrBuffer.byteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor); 		}				private function _onNESTileUp($e:CustomEvent):void		{			if(_curPalette.curTile%4 == 0)			{				_curPalette.updateTiles($e.objInfo.id,0,4);			}			else			{				_curPalette.updateCurrentTile($e.objInfo.id);			}						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.byteArray, _chrBuffer.byteArray);			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.byteArray, _namBuffer.byteArray, _chrBuffer.byteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor);		}				private function _onRamBufferLoaded($e:Event):void		{			trace("ram loaded");			var tmpNamBuffer:ByteArray = new ByteArray();			var tmpChrBuffer:ByteArray = new ByteArray();			var tmpPalBuffer:ByteArray = new ByteArray();						//arrayCopy(buffer, 0, chrBuffer, 0, 0x4000);		//start from 0, length 16384			//arrayCopy(buffer, 0x2000, namBuffer, 0, 0x0400);	//start from 8192, length 1024			//arrayCopy(buffer, 0x3F00, palBuffer, 0, 0x0010);	//start from 16128, length 16						//_controls.switchChrPage("2");						for(var k=0; k<0x4000; k++) {				tmpChrBuffer.writeByte(_ramBuffer.byteArray[k]);			}						for(var i=0x2000; i<0x2400; i++) {				tmpNamBuffer.writeByte(_ramBuffer.byteArray[i]);			}						for(var j=0x3F00; j<0x3F10; j++) {				tmpPalBuffer.writeByte(_ramBuffer.byteArray[j]);			}						_palBuffer.byteArray = tmpPalBuffer;			_onPalBufferLoaded(null);			_chrBuffer.byteArray = tmpChrBuffer;			_onChrBufferLoaded(null);			_namBuffer.byteArray = tmpNamBuffer;			_onNamBufferLoaded(null);		}				private function _onChrBufferLoaded($e:Event):void		{			_namGrid.setChrBuffer(_chrBuffer.byteArray);			_chrGrid.setChrBuffer(_chrBuffer.byteArray);			_chrEditor.setChrBuffer(_chrBuffer.byteArray);						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.byteArray, _chrBuffer.byteArray);						_controls.enableControl("nam");		}				private function _onNamBufferLoaded($e:Event):void		{			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.byteArray, _namBuffer.byteArray, _chrBuffer.byteArray);						_controls.enableControl("submit");		}				private function _onPalBufferLoaded($e:Event):void		{			_curPalette.setPalette(_palBuffer.byteArray);						_namGrid.setPalBuffer(_palBuffer.byteArray);			_chrGrid.setPalBuffer(_palBuffer.byteArray);			_chrEditor.setPalBuffer(_palBuffer.byteArray);						_namGrid.setBackgroundWithByte(_palBuffer.byteArray[0]);			_chrGrid.setBackgroundWithByte(_palBuffer.byteArray[0]);						_controls.enableControl("chr");		}	}}