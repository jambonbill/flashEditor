package{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.net.SharedObject;    import flash.utils.ByteArray;	import com.carlcalderon.arthropod.Debug;	import com.playpower.core.*;	import com.playpower.events.CustomEvent;	import com.playpower.model.*;	import com.playpower.views.*;	public class NametableToolDoc extends Sprite	{		private var _controller:Controller;		private var _namGrid:Grid;		private var _chrGrid:Grid;		private var _chrEditor:CHREditor;		private var _nesPalette:NESPalette;		private var _curPalette:CurrentPalette;		private var _controls:Controls;		private var _ramBuffer:FileIO;		private var _palBuffer:FileIO;		private var _chrBuffer:FileIO;		private var _namBuffer:FileIO;		private var _credits:credits;		private var _userData:Object;		private var _so:SharedObject;		private var _lastVal:int = 1;		public function NametableToolDoc()		{			_controller = Controller.getInstance();						_ramBuffer = new FileIO("ram");			_ramBuffer.addEventListener(Event.COMPLETE, _onRamBufferLoaded, false, 0, true);			_palBuffer = new FileIO("pal");			_palBuffer.addEventListener(Event.COMPLETE, _onPalBufferLoaded, false, 0, true);			_chrBuffer = new FileIO("chr");			_chrBuffer.addEventListener(Event.COMPLETE, _onChrBufferLoaded, false, 0, true);			_namBuffer = new FileIO("nam");			_namBuffer.addEventListener(Event.COMPLETE, _onNamBufferLoaded, false, 0, true);						_userData = {};						this.addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage, false, 0, true);		}		public function _onAddedToStage($e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);						// get the shared obj, or if it doesn't exist, it wil be created automatially here			_so = SharedObject.getLocal("userData");						if (_so.data.ram) { // just check to see if a value is present. if so, restore				 _restoreGlobalSettings();			}			else {							// initialize global vars				_controller.chrPage = Constants.CHR_SLIDER_DEFAULT;				_controller.gridAlpha = 127;				_controller.gridEnabled = true;			}						// create nes palette array labels			var nesArr:Array = ["00","01","02","03","04","05","06","07","08","09","0A","0B","0C","0D","0E","0F",								"10","11","12","13","14","15","16","17","18","19","1A","1B","1C","1D","1E","1F",								"20","21","22","23","24","25","26","27","28","29","2A","2B","2C","2D","2E","2F",								"30","31","32","33","34","35","36","37","38","39","3A","3B","3C","3D","3E","3F"];			_controller.nesArr = nesArr;						// create left column : namGrid, nesPalette			_namGrid = new Grid(512,480);			_namGrid.addEventListener(CustomEvent.COLOR_SAMPLE, _onColorSample, false, 0, true);			_namGrid.addEventListener(CustomEvent.UPDATE_BUFFER, _onUpdateBuffer, false, 0, true);			_namGrid.x = Constants.GUTTER_WIDTH;			_namGrid.y = Constants.GUTTER_WIDTH*2;			this.addChild(_namGrid);			_namGrid.setLabel("NAM Editor");						_nesPalette = new NESPalette();			_nesPalette.addEventListener(CustomEvent.BUTTON_UP, _onNESTileUp, false, 0, true);			_nesPalette.x = Constants.GUTTER_WIDTH;			_nesPalette.y = _namGrid.y + _namGrid.height + (Constants.GUTTER_WIDTH*.5);			this.addChild(_nesPalette);			_nesPalette.setLabel("NES Palette");						// create mid column : chrGrid, curPalette, chrEditor			_chrGrid = new Grid(256,256);			_chrGrid.addEventListener(CustomEvent.BUTTON_UP, _onChrGridUp, false, 0, true);			_chrGrid.x = _namGrid.x + _namGrid.width + Constants.GUTTER_WIDTH; 			_chrGrid.y = Constants.GUTTER_WIDTH*2;			this.addChild(_chrGrid);			_chrGrid.setLabel("CHR Viewer");						_curPalette = new CurrentPalette();			_curPalette.addEventListener(CustomEvent.BUTTON_UP, _onCurTileUp, false, 0, true);			_curPalette.x = _chrGrid.x;			_curPalette.y = _chrGrid.y + _chrGrid.height + (Constants.GUTTER_WIDTH*.5) + 2;			this.addChild(_curPalette);			_curPalette.setLabel("Current Palette");						_chrEditor = new CHREditor(256,256);			_chrEditor.addEventListener(CustomEvent.UPDATE_BUFFER, _onCHREdit, false, 0, true);			_chrEditor.x = _namGrid.x + _namGrid.width + Constants.GUTTER_WIDTH; 			_chrEditor.y = _curPalette.y + _curPalette.height + (Constants.GUTTER_WIDTH*.5) + 4;			this.addChild(_chrEditor);_chrEditor.setLabel("CHR Editor");						// create UI			_controls = new Controls();			_controls.addEventListener(CustomEvent.SLIDER_PROGRESS, _onSliderProgress, false, 0, true);			_controls.addEventListener(CustomEvent.SLIDER_UP, _onSliderUp, false, 0, true);			_controls.addEventListener(CustomEvent.BUTTON_UP, _onButtonUp, false, 0, true);			_controls.x = Math.round(_chrGrid.x + _chrGrid.width + Constants.GUTTER_WIDTH);			_controls.y = Math.round(_chrGrid.y);			this.addChild(_controls);						// add credits			_credits = new credits();			this.addChild(_credits);			_credits.x = _namGrid.x;			_credits.y = Math.round(_nesPalette.y + _nesPalette.height - Constants.GUTTER_WIDTH);			_credits.buttonMode = true;			_credits.addEventListener(MouseEvent.CLICK, _onCreditsClick);			//_credits.x = _chrEditor.x + _chrEditor.width + Constants.GUTTER_WIDTH;			//_credits.y = this.stage.stageHeight - _credits.height - 23;						if (_so.data.ram) { // just check to see if a value is present. if so, restore				 _restoreData();			}			else {				// otherwise, start fresh. begin with loading default RAM file				_ramBuffer.loadDefault(Constants.DEFAULT_FILE);			}		}				private function _restoreData():void		{			_ramBuffer.theByteArray = _so.data.ram;			_palBuffer.theByteArray = _so.data.pal;			_chrBuffer.theByteArray = _so.data.theCHR;			_namBuffer.theByteArray = _so.data.nam;						_onRamBufferLoaded(null);			////			_curPalette.setPalette(_so.data.curPal);			_curPalette.selectedPal = _so.data.selectedPal;			////			_curPalette.curTile = _so.data.curTile;			_curPalette.curColor = _so.data.curColor;			if(!_so.data.showHexVals) {				_curPalette.toggleHexDisplay();				_nesPalette.toggleHexDisplay();			}		}				private function _restoreGlobalSettings():void		{			trace("_restoreGlobalSettings");			// get _userData from shared obj data			//_userData = _so.data;						_controller.gridEnabled = _so.data.gridEnabled;			_controller.gridAlpha = _so.data.gridAlpha;			_controller.showHexVals = _so.data.showHexVals;			_controller.tileDraw = _so.data.tileDraw;			_controller.palDraw = _so.data.palDraw;			_controller.chrPage = _so.data.chrPage;						_controller.selectedTile = _so.data.selectedTile;			_controller.selectedTile1 = _so.data.selectedTile1;			_controller.selectedTile2 = _so.data.selectedTile2;			_controller.selectedTile3 = _so.data.selectedTile3;			_controller.paletteTileNum = _so.data.paletteTileNum;			_controller.activeAttr = _so.data.activeAttr;			_controller.curAttr = _so.data.curAttr;			_controller.curKey = _so.data.curKey;			//_controller.curSelectedButton = _so.data.curSelectedButton;		}				private function _saveState():void		{			trace("saving state");			_so.data.ram = _ramBuffer.theByteArray;			_so.data.pal = _palBuffer.theByteArray;			_so.data.theCHR = _chrBuffer.theByteArray;			_so.data.nam = _namBuffer.theByteArray;			_so.data.curTile = _curPalette.curTile;			_so.data.curColor = _curPalette.curColor;						////			_so.data.selectedPal = _curPalette.selectedPal;			_so.data.curPal = _curPalette.theByteArray;			////						_so.data.gridEnabled = _controller.gridEnabled;			_so.data.gridAlpha = _controller.gridAlpha;			_so.data.showHexVals = _controller.showHexVals;				_so.data.tileDraw = _controller.tileDraw;			_so.data.palDraw = _controller.palDraw;			_so.data.chrPage = _controller.chrPage;						_so.data.selectedTile = _controller.selectedTile;			_so.data.selectedTile1 = _controller.selectedTile1;			_so.data.selectedTile2 = _controller.selectedTile2;			_so.data.selectedTile3 = _controller.selectedTile3;			_so.data.paletteTileNum = _controller.paletteTileNum;			_so.data.activeAttr = _controller.activeAttr;			_so.data.curAttr = _controller.curAttr;			_so.data.curKey = _controller.curKey;			//_so.data.curSelectedButton = _controller.curSelectedButton;						//_so.data = _userData;			_so.flush(32000);		}				private function _onAllDataLoaded():void		{			// called after PAL / CHR / NAM are loaded			_onPalBufferLoaded(null);			_onChrBufferLoaded(null);			_onNamBufferLoaded(null);						trace("onAllDataLoaded, saving state");			//_saveState();		}				private function _onCHREdit($e:CustomEvent):void		{			_chrBuffer.theByteArray = $e.objInfo.val;			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);			_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);						trace("_onCHREdit, saving state");			_saveState();		}				private function _onUpdateBuffer($e:CustomEvent):void		{			_namBuffer.theByteArray = $e.objInfo.val as ByteArray;						trace("_onUpdateBuffer, saving state");			_saveState();		}				private function _onColorSample($e:CustomEvent):void		{			_curPalette.setPalette(_palBuffer.theByteArray);						trace("_onColorSample, saving state");			_saveState();		}				private function _onButtonUp($e:CustomEvent):void		{			var id:String = $e.objInfo.id;						switch(id)			{				case "CLEAR NAM": 					_namBuffer.clearBuffer();					_onAllDataLoaded();					break;				case "CLEAR CHR": 					_chrBuffer.clearBuffer();					_onAllDataLoaded();					break;				case "CLEAR PAL": 					_palBuffer.clearBuffer();					_onAllDataLoaded();					break;				case "CLEAR ALL": 					_ramBuffer.clearBuffer();					_namBuffer.clearBuffer();					_palBuffer.clearBuffer();					_chrBuffer.clearBuffer();					_onAllDataLoaded();					break;				case "SAVE RAM": _ramBuffer.concatAndSave(_chrBuffer.theByteArray, _namBuffer.theByteArray, _palBuffer.theByteArray); break;				case "OPEN RAM": _ramBuffer.startLoadingFile(); break;				case "DL RAM": _ramBuffer.startLoadingFile(); break;				case "OPEN NAM": _namBuffer.startLoadingFile(); break;				case "DL NAM": _namBuffer.startLoadingFile(); break;				case "OPEN CHR": _chrBuffer.startLoadingFile(); break;				case "SAVE CHR": _chrBuffer.save(); break;				case "DL CHR": _chrBuffer.startLoadingFile(); break;				case "OPEN PAL": _palBuffer.startLoadingFile(); break;				case "DL PAL": _palBuffer.startLoadingFile(); break;				case "SAVE NAM": _namBuffer.save(); break;				case "SAVE PAL": _palBuffer.save(); break;				case "UPLOAD NAM": _namBuffer.startLoadingFile(true); break;				case "UPLOAD PAL": _palBuffer.startLoadingFile(true); break;				/*case "L": _grid.shiftVals("L"); break;				case "R": _grid.shiftVals("R"); break;				case "U": _grid.shiftVals("U"); break;				case "D": _grid.shiftVals("D"); break;*/				case "TILE": _controller.tileDraw = !_controller.tileDraw; break;				case "PALETTE": _controller.palDraw = !_controller.palDraw; break;				case "HEX DISPLAY": 					_nesPalette.toggleHexDisplay(); 					_curPalette.toggleHexDisplay(); 					break;			}						trace("_onButtonUp, saving state");			_saveState();		}				private function _onSliderUp($e:CustomEvent):void		{			if(_chrBuffer.theByteArray.length > 0)			{				var id:String = $e.objInfo.id;				var val:Number = Number($e.objInfo.val);				var pct:Number = Number($e.objInfo.percent);								switch(id)				{					case "chr-page": 						_controller.chrPage = val-1;						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);						_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);						_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal); 						_chrEditor.loadEditor();						break;				}								trace("_onSliderUp, saving state");				_saveState();			}		}				private function _onSliderProgress($e:CustomEvent):void		{			var id:String = $e.objInfo.id;			var val:Number = Number($e.objInfo.val);						switch(id)			{				case "grid-alpha":					_controller.gridAlpha = val;					_namGrid.updateLinesAlpha(); 					_chrGrid.updateLinesAlpha();					_chrEditor.updateLinesAlpha();					break;				case "chr-page": 					if(val != _lastVal) {						_controller.chrPage = val-1;						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);						_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);						_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal); 						_chrEditor.loadEditor();						_lastVal = val;					}					break;			}						trace("_onSliderProgress, saving state");			_saveState();		}				private function _onChrGridUp($e:CustomEvent):void		{			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal);			_chrEditor.loadEditor();						trace("_onChrGridUp, saving state");			_saveState();		}				private function _onCurTileUp($e:CustomEvent):void		{			_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal);			_chrEditor.loadEditor();						trace("_onCurTileUp, saving state");			_saveState();		}				private function _onNESTileUp($e:CustomEvent):void		{			if(_curPalette.curTile%4 == 0)			{				_curPalette.updateTiles($e.objInfo.id,0,4);			}			else			{				_curPalette.updateCurrentTile($e.objInfo.id);			}						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal);			_chrEditor.loadEditor(); 						trace("_onNESTileUp, saving state");			_saveState();		}				private function _onRamBufferLoaded($e:Event):void		{			var tmpNamBuffer:ByteArray = new ByteArray();			var tmpChrBuffer:ByteArray = new ByteArray();			var tmpPalBuffer:ByteArray = new ByteArray();						for(var k=0; k<0x4000; k++) {				tmpChrBuffer.writeByte(_ramBuffer.theByteArray[k]);			}						for(var i=0x2000; i<0x2400; i++) {				tmpNamBuffer.writeByte(_ramBuffer.theByteArray[i]);			}						for(var j=0x3F00; j<0x3F10; j++) {				tmpPalBuffer.writeByte(_ramBuffer.theByteArray[j]);			}						_palBuffer.theByteArray = tmpPalBuffer;			_chrBuffer.theByteArray = tmpChrBuffer;			_namBuffer.theByteArray = tmpNamBuffer;			_onAllDataLoaded();		}				private function _onPalBufferLoaded($e:Event):void		{			_curPalette.setPalette(_palBuffer.theByteArray);						_namGrid.setPalBuffer(_palBuffer.theByteArray);			_chrGrid.setPalBuffer(_palBuffer.theByteArray);			_chrEditor.setPalBuffer(_palBuffer.theByteArray);						_namGrid.setBackgroundWithByte(_palBuffer.theByteArray[0]);			_chrGrid.setBackgroundWithByte(_palBuffer.theByteArray[0]);						_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);			_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal); 						_controls.enableControl("chr");						//if($e) {				trace("_onPalBufferLoaded, saving state");				_saveState();			//}		}				private function _onChrBufferLoaded($e:Event):void		{			_chrEditor.resetEditor();			_namGrid.setChrBuffer(_chrBuffer.theByteArray);			_chrGrid.setChrBuffer(_chrBuffer.theByteArray);			_chrEditor.setChrBuffer(_chrBuffer.theByteArray);						_chrGrid.updatePixels(_curPalette.selectedPal, _curPalette.theByteArray, _chrBuffer.theByteArray);			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);			_chrEditor.updateEditor(_curPalette.curTile, _curPalette.curColor, _curPalette.selectedPal); 			_chrEditor.loadEditor();						_controls.enableControl("nam");						//if($e) {				trace("_onChrBufferLoaded, saving state");				_saveState();			//}		}				private function _onNamBufferLoaded($e:Event):void		{			_namGrid.updatePixelsWithNam(_curPalette.selectedPal, _curPalette.theByteArray, _namBuffer.theByteArray, _chrBuffer.theByteArray);						_controls.enableControl("submit");						//if($e) {				trace("_onNamBufferLoaded, saving state");				_saveState();			//}		}				private function _onCreditsClick($e:MouseEvent):void		{			var urlReq:URLRequest = new URLRequest("http://www.github.com/playpower");			navigateToURL(urlReq);		}	}}