package com.playpower.model{	import flash.display.Sprite;	import flash.events.*;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;    import flash.utils.ByteArray;	import com.carlcalderon.arthropod.Debug;	import com.playpower.events.CustomEvent;	import com.playpower.core.*;	public class FileIO extends Sprite	{		private var _type:String;		private var _controller:Controller;		private var _byteArray:ByteArray;				// for loading files locally		private var _file:FileReference;				// for downloading files from remote server		private var _downloadURL:URLRequest;		private var _dlFile:FileReference;        private var _fileName:String = "geo.pal";				// for uploading files to remote server		private var _uploadURL:URLRequest;		private var _ulFile:FileReference;				private var _uploadFlag:Boolean = false;				public function FileIO(type:String=null)		{			if(type) _type = type;			_controller = Controller.getInstance();			_byteArray = new ByteArray();						_uploadURL = new URLRequest();            _uploadURL.url = "";						_downloadURL = new URLRequest();            _downloadURL.url = "";		}				public function get byteArray():ByteArray		{			return _byteArray;		}				public function set byteArray(a:ByteArray):void		{			//Debug.log("setting byteArray");			_byteArray = a;		}				public function startLoadingFile(flag:Boolean = false):void		{			// if this is set to true, upload file to remote server			_uploadFlag = flag;			//Debug.log("_uploadFlag = " + _uploadFlag);						_file = new FileReference();			_file.addEventListener(Event.SELECT, _selectHandler, false, 0, true);			_file.addEventListener(Event.CANCEL, _cancelHandler, false, 0, true);            _file.addEventListener(Event.COMPLETE, _completeHandler, false, 0, true);            _file.addEventListener(IOErrorEvent.IO_ERROR, _ioErrorHandler, false, 0, true);            _file.addEventListener(Event.OPEN, _openHandler, false, 0, true);            _file.addEventListener(ProgressEvent.PROGRESS, _progressHandler);            _file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _securityErrorHandler, false, 0, true);            			var fileFilter:FileFilter = new FileFilter("Binary: (*."+_type+")", "*."+_type);			_file.browse([fileFilter]);						// save jpg (or png) of bmp data of either pal or nam			/*var myBitmapData:BitmapData = new BitmapData(img.width, img.height);			myBitmapData.draw(img); 			var jpgEncoder:JPGEncoder = new JPGEncoder(80);			var imgByteData:ByteArray = jpgEncoder.encode(myBitmapData);			file = new FileReference();			//file.browse(new Array(new FileFilter("Images (*.jpg, *.jpeg)", "*.jpg;*.jpeg")));			file.save(imgByteData, "test.jpg"); */		}				public function save():void		{			if(_type)			{				var outputFileName:String = "untitled." + _type;				var saveFile:FileReference = new FileReference();				saveFile.addEventListener(Event.OPEN, _saveBeginHandler, false, 0, true);				saveFile.addEventListener(Event.COMPLETE, _saveCompleteHandler, false, 0, true);				saveFile.addEventListener(IOErrorEvent.IO_ERROR, _saveIOErrorHandler, false, 0, true);				saveFile.save(_byteArray, outputFileName);				//saveFile.browse? to save over old files? errr?			}		}				public function download():void		{            //_dlFile.download(_downloadURL, _fileName);		}/************* * HANDLERS  * *************/		private function _cancelHandler($e:Event):void 		{            //Debug.log("cancelHandler: " + $e);        }        private function _completeHandler($e:Event):void 		{            //Debug.log("completeHandler: " + $e);        }        private function _ioErrorHandler($e:IOErrorEvent):void 		{            //Debug.log("ioErrorHandler: " + $e);        }        private function _openHandler($e:Event):void 		{            //Debug.log("openHandler: " + $e);        }        private function _progressHandler($e:ProgressEvent):void 		{            var file:FileReference = FileReference($e.target);            //Debug.log("progressHandler name=" + file.name + " bytesLoaded=" + $e.bytesLoaded + " bytesTotal=" + $e.bytesTotal);        }        private function _securityErrorHandler($e:SecurityErrorEvent):void 		{            //Debug.log("securityErrorHandler: " + $e);        }		private function _selectHandler($e:Event):void		{			//Debug.log("_selectHandler, _uploadFlag = " + _uploadFlag);			_file.removeEventListener(Event.SELECT, _selectHandler);						_file.addEventListener(Event.COMPLETE, _loadCompleteHandler, false, 0, true);			_file.load();						if(_uploadFlag)			{				_uploadFlag = false;								var file:FileReference = FileReference($e.target);				//Debug.log("selectHandler: name=" + file.name + " URL=" + _uploadURL.url);								try				{					//Debug.log("beging file upload");					_file.upload(_uploadURL, "test");					//Debug.log("SUCCESS!");				}				catch (error:Error)				{					//Debug.log("Unable to upload files.");				}			}		}				private function _loadCompleteHandler($e:Event):void		{			_file.removeEventListener(Event.COMPLETE, _loadCompleteHandler);						_byteArray = _file.data;			//_setDisplayState(LOAD_COMPLETE);						dispatchEvent( $e );		}				private function _saveBeginHandler($e:Event):void		{			//_setDisplayState(PROGRESS);			//_progressStateView.label = "Saving file...";		}						private function _saveCompleteHandler($e:Event):void		{			$e.target.removeEventListener(Event.OPEN, _saveBeginHandler);			$e.target.removeEventListener(Event.COMPLETE, _saveCompleteHandler);			$e.target.removeEventListener(IOErrorEvent.IO_ERROR, _saveIOErrorHandler);						//clearImageContainer();						//_setDisplayState(SAVE_COMPLETE);		}				private function _saveIOErrorHandler($e:IOErrorEvent):void		{			$e.target.removeEventListener(Event.COMPLETE, _saveCompleteHandler);			$e.target.removeEventListener(IOErrorEvent.IO_ERROR, _saveIOErrorHandler);						//Debug.log("Error while trying to save:");			Debug.log($e);		}	}}